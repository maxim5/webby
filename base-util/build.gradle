plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
}

dependencies {
    implementation 'com.google.errorprone:error_prone_annotations:2.28.0'
    implementation 'org.checkerframework:checker-qual:3.44.0'
    implementation 'com.google.guava:guava:33.2.0-jre'
    implementation 'com.carrotsearch:hppc:0.10.0'
    implementation 'io.netty:netty-all:4.1.110.Final'

    testImplementation 'com.google.truth:truth:1.4.2'
}

dependencies {
    testImplementation 'com.google.inject:guice:7.0.0'  // testing generics
}

dependencies {
    testFixturesImplementation 'com.google.truth:truth:1.4.2'
    testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'

    testFixturesImplementation 'org.jetbrains:annotations:24.1.0'
    testFixturesImplementation 'com.google.inject:guice:7.0.0'
    testFixturesImplementation 'com.carrotsearch:hppc:0.10.0'
    testFixturesImplementation 'io.netty:netty-all:4.1.110.Final'
}

// Exports

ext.exportDir = "${buildDir}/exported/sources"
final exports = ['*CharArray*.java': 'arrays']

task exportSrc(type: Copy) {
    includeEmptyDirs = false
    exports.each { files, dest ->
        // https://stackoverflow.com/questions/40984658/using-a-wildcard-in-gradle-copy-task
        from sourceSets.main.java.srcDirs
        include "**/${files}"
        into "${exportDir}/${dest}"
    }
}
exportSrc.dependsOn compileJava
